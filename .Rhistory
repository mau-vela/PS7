}
}
senate_group[, c("seats", "tier1_avemag", "tier1_districts", "upper_tier_seats", "legal_threshold", "Carey_Hix_mean_dm", "eff_thresh", "maxeffleg")] <- lapply(senate_group[, c("seats", "tier1_avemag", "tier1_districts", "upper_tier_seats", "legal_threshold", "Carey_Hix_mean_dm", "eff_thresh", "maxeffleg")], as.numeric)
senate_group <- na.omit(senate_group)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower", type=list(symm=2))
levels(senate_group$Carey_Hix_mean_dm)
levels(senate_group$elecrule)
n      = 15
cont   = c(rnorm(n, mean=0, sd=1),
rnorm(n, mean=1, sd=1),
rnorm(n, mean=2, sd=1) )
bin    = c(rbinom(n, size=1, prob=.2),
rbinom(n, size=1, prob=.5),
rbinom(n, size=1, prob=.8) )
ord    = c(rbinom(n, size=5, prob=.2),
rbinom(n, size=5, prob=.5),
rbinom(n, size=5, prob=.8) )
data   = data.frame(cont=cont, bin=bin, ord=factor(ord, ordered=TRUE))
g.dist = daisy(data, metric="gower", type=list(symm=2))
data
n      = 15
cont   = c(rnorm(n, mean=0, sd=1),
rnorm(n, mean=1, sd=1),
rnorm(n, mean=2, sd=1) )
bin    = c(rbinom(n, size=1, prob=.2),
rbinom(n, size=1, prob=.5),
rbinom(n, size=1, prob=.8) )
ord    = c(rbinom(n, size=5, prob=.2),
rbinom(n, size=5, prob=.5),
rbinom(n, size=5, prob=.8) )
data   = data.frame(cont=cont, bin=bin, ord=factor(ord, ordered=FALSE))
g.dist = daisy(data, metric="gower", type=list(symm=2))
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- lapply(senate_group, as.numeric)
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], as.factor)
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- as.data.frame(lapply(senate_group, as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], as.factor)
senate_group <- na.omit(senate_group)
levels(senate_group$tier1_formula)
View(senate_group)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower", type=list(symm=2))
View(senate_group)
View(data)
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- as.data.frame(lapply(senate_group, as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], function(x) as.factor(x)-1)
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- as.data.frame(lapply(senate_group, as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], function(x) as.factor(as.numeric(as.factor(x))-1))
senate_group <- na.omit(senate_group)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower", type=list(symm=2))
senate_group[,c("elecrule", "Carey_Hix_mean_dm")]
data
levels(data$ord)
levels(senate_group$elecrule)
g.dist = daisy(data, metric="gower"
)
?daisy
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower")
hc.c = hclust(g.dist, method="complete")
plot(hc.c)
# group senate by country and bloc
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- as.data.frame(lapply(senate_group, as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], as.factor)
senate_group <- na.omit(senate_group)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower")
hc.c = hclust(g.dist, method="complete")
plot(hc.c)
hc.c$labels <- senate_group[,1]
plot(hc.c)
hc.c$labels <- senate_group[,1]
hc.c$labels <- senate_group[-1,1]
plot(hc.c)
hc.c
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group <- as.data.frame(lapply(senate_group, as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], as.factor)
#senate_group <- na.omit(senate_group)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower")
hc.c = hclust(g.dist, method="complete")
hc.c$labels
senate_group[-1,1]
View(senate_group)
senate_group <- data.frame(NULL)
for(i in unique(senate$country)){
sub <- senate[senate$country==i,]
for(j in unique(sub$bloc)){
sub2 <- sub[sub$bloc==j,]
name <- paste0(unique(sub2$country), unique(sub2$bloc))
val <- apply(sub2[,9:dim(sub2)[2]], 2, function(x){
vec <- as.numeric(x)
if(length(vec)%%2==0){
vec2 <- vec[-(which(vec==max(vec))[1])]
median(vec2)
}
else{
median(vec)
}
})
newrow <- data.frame(t(c(name, val)))
senate_group <- rbind(senate_group, newrow)
}
}
senate_group[,-1] <- as.data.frame(lapply(senate_group[,-1], as.numeric))
senate_group[,c("elecrule", "tier1_formula", "tier2_formula")] <- lapply(senate_group[,c("elecrule", "tier1_formula", "tier2_formula")], as.factor)
senate_group <- na.omit(senate_group)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower")
hc.c = hclust(g.dist, method="complete")
hc.c$labels <- senate_group[-1,1]
plot(hc.c)
g.dist = daisy(senate_group[,c("elecrule", "Carey_Hix_mean_dm")], metric="gower")
hc.c = hclust(g.dist, method="complete")
plot(hc.c)
hc.c$labels
senate_group[,1]
senate_group[-1,1]
length(senate_group[-1,1])
length(hc.c$labels)
hc.c$labels <- senate_group[,1]
plot(hc.c)
library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
add
add(1,2,3)
devtools::install_github("rstudio/rmarkdown")
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github('rstudio/rmarkdown')
library(BaM2)
setwd("C:/Users/MauricioAndresVela/Documents/R/Clase/PS7")
sg.int<-function(g,lower,upper, dimensions, parallel=1, ...){
#Require packages
require("SparseGrid"); require("doSNOW"); require(plyr); require(foreach)
#Put number of cores
registerDoSNOW(makeCluster(parallel, type = "SOCK"))
#registerDoParallel(cores=parallel)
#Upper and lower
lower<-floor(lower)
upper<-ceiling(upper)
if (any(lower>upper)) stop("lower must be smaller than upper")
#Need to put dimensions according to lenght of lower and upper
if (dimensions > length(lower) | dimensions > length(upper))  stop("Dimensions is incorrect")
# Sequence for lower and upper fo each dimension , and expand.grid gives creates all permutations
gridss<-as.matrix(expand.grid(lapply(1:dimensions, function(x) seq(lower[x], upper[x]-1, by=1) )))
#Create integration grid
sp.grid <- createIntegrationGrid( 'KPU', dimension=dimensions, k=5 )
nodes<-gridss[1,]+sp.grid$nodes
weights<-sp.grid$weights
for (i in 2:nrow(gridss)) {
nodes<-rbind(nodes,gridss[i,]+sp.grid$nodes)
weights<-c(weights,sp.grid$weights)
}
#evaluate function g in parallel
cluster <- makeCluster(parallel)
clusterExport(cluster, c("lower", "upper"))
gx.sp <- parApply(cluster, nodes, 1, g)
#gx.sp <- aaply(.data=nodes, .margins = 1, .parallel = parallel, .fun = g) #showing warning
val.sp <- gx.sp %*%weights
val.sp
}
g <- function(x) x[1]^2+x[2]^2+x[3]^2
lower <- c(0,0,0)
upper <- c(10,10,10)
sg.int(g,lower=lower,upper=upper, dimensions=3,parallel=2)
library(microbenchmark)
microbenchmark(
"1 core" = sg.int(g, dim=3, lower=lower, upper=upper, parallel=1),
"4 core" = sg.int(g, dim=3, lower=lower, upper=upper, parallel=2),
times=1
)
microbenchmark(
"1 core" = sg.int(g, dim=3, lower=lower, upper=upper, parallel=2),
"4 core" = sg.int(g, dim=3, lower=lower, upper=upper, parallel=4),
times=1
)
g <- function(x) x[1]^2+x[2]^2
lower <- c(0,0,0)
upper <- c(10,10,10)
sg.int(g,lower=lower,upper=upper, dimensions=2,parallel=2)
g <- function(x) x[1]^2+x[2]^2
lower <- c(0,0)
upper <- c(10,10)
sg.int(g,lower=lower,upper=upper, dimensions=2,parallel=2)
sg.int<-function(g,lower,upper, dimensions, parallel=1, ...){
#Require packages
require("SparseGrid"); require("doSNOW"); require(plyr); require(foreach)
#Put number of cores
registerDoSNOW(makeCluster(parallel, type = "SOCK"))
#registerDoParallel(cores=parallel)
#Upper and lower
lower<-floor(lower)
upper<-ceiling(upper)
if (any(lower>upper)) stop("lower must be smaller than upper")
#Need to put dimensions according to lenght of lower and upper
if (dimensions > length(lower) | dimensions > length(upper))  stop("Dimensions is incorrect")
# Sequence for lower and upper fo each dimension , and expand.grid gives creates all permutations
cluster <- makeCluster(parallel)
clusterExport(cluster, c("lower", "upper"))
gridss<-as.matrix(expand.grid(parLapply(cluster, 1:dim, function(x) seq(lower[x], upper[x]-1, by=1))))
#Create integration grid
sp.grid <- createIntegrationGrid( 'KPU', dimension=dimensions, k=5 )
nodes<-gridss[1,]+sp.grid$nodes
weights<-sp.grid$weights
for (i in 2:nrow(gridss)) {
nodes<-rbind(nodes,gridss[i,]+sp.grid$nodes)
weights<-c(weights,sp.grid$weights)
}
#evaluate function g in parallel
gx.sp <- parApply(cluster, nodes, 1, g)
#gx.sp <- aaply(.data=nodes, .margins = 1, .parallel = parallel, .fun = g) #showing warning
val.sp <- gx.sp %*%weights
val.sp
}
g <- function(x) x[1]^2+x[2]^2
lower <- c(0,0)
upper <- c(10,10)
sg.int(g,lower=lower,upper=upper, dimensions=2,parallel=2)
parallel=1
registerDoSNOW(makeCluster(parallel, type = "SOCK"))
#registerDoParallel(cores=parallel)
#Upper and lower
lower<-floor(lower)
upper<-ceiling(upper)
if (any(lower>upper)) stop("lower must be smaller than upper")
#Need to put dimensions according to lenght of lower and upper
if (dimensions > length(lower) | dimensions > length(upper))  stop("Dimensions is incorrect")
dimensions=2
registerDoSNOW(makeCluster(parallel, type = "SOCK"))
#registerDoParallel(cores=parallel)
#Upper and lower
lower<-floor(lower)
upper<-ceiling(upper)
if (any(lower>upper)) stop("lower must be smaller than upper")
#Need to put dimensions according to lenght of lower and upper
if (dimensions > length(lower) | dimensions > length(upper))  stop("Dimensions is incorrect")
cluster <- makeCluster(parallel)
clusterExport(cluster, c("lower", "upper"))
gridss<-as.matrix(expand.grid(parLapply(cluster, 1:dim, function(x) seq(lower[x], upper[x]-1, by=1))))
parLapply(cluster, 1:dim, function(x) seq(lower[x], upper[x]-1, by=1))
gridss<-as.matrix(expand.grid(parLapply(cluster, 1:dimensions, function(x) seq(lower[x], upper[x]-1, by=1))))
sg.int<-function(g,lower,upper, dimensions, parallel=1, ...){
#Require packages
require("SparseGrid"); require("doSNOW"); require(plyr); require(foreach)
#Put number of cores
registerDoSNOW(makeCluster(parallel, type = "SOCK"))
#registerDoParallel(cores=parallel)
#Upper and lower
lower<-floor(lower)
upper<-ceiling(upper)
if (any(lower>upper)) stop("lower must be smaller than upper")
#Need to put dimensions according to lenght of lower and upper
if (dimensions > length(lower) | dimensions > length(upper))  stop("Dimensions is incorrect")
# Sequence for lower and upper fo each dimension , and expand.grid gives creates all permutations
cluster <- makeCluster(parallel)
clusterExport(cluster, c("lower", "upper"))
gridss<-as.matrix(expand.grid(parLapply(cluster, 1:dimensions, function(x) seq(lower[x], upper[x]-1, by=1))))
#Create integration grid
sp.grid <- createIntegrationGrid( 'KPU', dimension=dimensions, k=5 )
nodes<-gridss[1,]+sp.grid$nodes
weights<-sp.grid$weights
for (i in 2:nrow(gridss)) {
nodes<-rbind(nodes,gridss[i,]+sp.grid$nodes)
weights<-c(weights,sp.grid$weights)
}
#evaluate function g in parallel
gx.sp <- parApply(cluster, nodes, 1, g)
#gx.sp <- aaply(.data=nodes, .margins = 1, .parallel = parallel, .fun = g) #showing warning
val.sp <- gx.sp %*%weights
val.sp
}
g <- function(x) x[1]^2+x[2]^2
lower <- c(0,0)
upper <- c(10,10)
sg.int(g,lower=lower,upper=upper, dimensions=2,parallel=2)
microbenchmark(
"1 core" = sg.int(g, dim=3, lower=lower, upper=upper, parallel=2),
"4 core" = sg.int(g, dim=3, lower=lower, upper=upper, parallel=4),
times=1
)
dd
microbenchmark(
"1 core" = sg.int(g, dim=2, lower=lower, upper=upper, parallel=2),
"4 core" = sg.int(g, dim=2, lower=lower, upper=upper, parallel=4),
times=1
)
g <- function(x) x[1]^2+x[2]^2
lower <- c(0,0)
upper <- c(10,10)
registerDoSNOW(makeCluster(parallel, type = "SOCK"))
#registerDoParallel(cores=parallel)
#Upper and lower
lower<-floor(lower)
upper<-ceiling(upper)
if (any(lower>upper)) stop("lower must be smaller than upper")
#Need to put dimensions according to lenght of lower and upper
if (dimensions > length(lower) | dimensions > length(upper))  stop("Dimensions is incorrect")
# Sequence for lower and upper fo each dimension , and expand.grid gives creates all permutations
cluster <- makeCluster(parallel)
clusterExport(cluster, c("lower", "upper"))
gridss<-as.matrix(expand.grid(parLapply(cluster, 1:dimensions, function(x) seq(lower[x], upper[x]-1, by=1))))
sp.grid <- createIntegrationGrid( 'KPU', dimension=dimensions, k=5 )
nodes<-gridss[1,]+sp.grid$nodes
weights<-sp.grid$weights
for (i in 2:nrow(gridss)) {
nodes<-rbind(nodes,gridss[i,]+sp.grid$nodes)
weights<-c(weights,sp.grid$weights)
}
gx.sp <- parApply(cluster, nodes, 1, g)
val.sp <- gx.sp %*%weights
parallel=2
sg.int<-function(g,lower,upper, dimensions, parallel=1, ...){
#Require packages
require("SparseGrid"); require("doSNOW"); require(plyr); require(foreach)
#Put number of cores
#registerDoSNOW(makeCluster(parallel, type = "SOCK"))
#registerDoParallel(cores=parallel)
cluster <- makeCluster(parallel)
#Upper and lower
lower<-floor(lower)
upper<-ceiling(upper)
if (any(lower>upper)) stop("lower must be smaller than upper")
#Need to put dimensions according to lenght of lower and upper
if (dimensions > length(lower) | dimensions > length(upper))  stop("Dimensions is incorrect")
# Sequence for lower and upper fo each dimension , and expand.grid gives creates all permutations
clusterExport(cluster, c("lower", "upper"))
gridss<-as.matrix(expand.grid(parLapply(cluster, 1:dimensions, function(x) seq(lower[x], upper[x]-1, by=1))))
#Create integration grid
sp.grid <- createIntegrationGrid( 'KPU', dimension=dimensions, k=5 )
nodes<-gridss[1,]+sp.grid$nodes
weights<-sp.grid$weights
for (i in 2:nrow(gridss)) {
nodes<-rbind(nodes,gridss[i,]+sp.grid$nodes)
weights<-c(weights,sp.grid$weights)
}
#evaluate function g in parallel
gx.sp <- parApply(cluster, nodes, 1, g)
#gx.sp <- aaply(.data=nodes, .margins = 1, .parallel = parallel, .fun = g) #showing warning
val.sp <- gx.sp %*%weights
val.sp
}
g <- function(x) x[1]^2+x[2]^2
lower <- c(0,0)
upper <- c(10,10)
sg.int(g,lower=lower,upper=upper, dimensions=2,parallel=2)
microbenchmark(
"1 core" = sg.int(g, dim=2, lower=lower, upper=upper, parallel=2),
"4 core" = sg.int(g, dim=2, lower=lower, upper=upper, parallel=4),
times=1
)
sg.int(g,lower=lower,upper=upper, dimensions=2,parallel=4)
microbenchmark(
"1 core" = sg.int(g, dim=2, lower=lower, upper=upper, parallel=2),
"4 core" = sg.int(g, dim=2, lower=lower, upper=upper, parallel=4),
times=1
)
g <- function(x) x[1]^2+x[2]^2
lower <- c(0,0)
upper <- c(10,10)
sg.int(g,lower=lower,upper=upper, dimensions=2,parallel=4)
g <- function(x) x[1]^2+x[2]^2
lower <- c(0,0)
upper <- c(10,10)
sg.int(g,lower=lower,upper=upper, dimensions=2,parallel=1)
g <- function(x) x[1]^2+x[2]^2
lower <- c(0,0)
upper <- c(10,10)
sg.int(g,lower=lower,upper=upper, dimensions=2,parallel=2)
g <- function(x) x[1]^2+x[2]^2
lower <- c(0,0)
upper <- c(10,10)
sg.int(g,lower=lower,upper=upper, dimensions=2,parallel=3)
detectCores() - 1
require(parallel)
